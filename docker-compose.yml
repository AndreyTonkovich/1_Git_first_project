version: "3.9"
# sudo docker compose -f docker-compose.yml build
# sudo docker compose -f docker-compose.yml up -d
services:
  #-------------------------------------------------------------------------------------
  #Web-приложение на flask
  app:
    # image создается из инструкций Dockerfile
    build: ./app
    container_name: web_flask # для удобства обращения по имени контейнера,
    # но если несколько версий на одной машине, то будет конфликт имен
    #ports:
    #  - 5001:5000 можно пробросить наружу
    command: gunicorn --bind 0.0.0.0:5000 app:app # для запуска web- сервиса используется
    # gunicorn на 5000 порт приложение app
    # WSGI server - интерфейс для маршрутизации запросов
    # от веб-серверов(Apache, Nginx и т.д.) на веб-приложения

    #Gunicorn переводит запросы, полученные от Nginx, в формат,
    #который может обрабатывать ваше веб-приложение, и обеспечивает
    #выполнение кода при необходимости

    #Источник: https://calcsbox.com/post/cto-takoe-gunicorn-i-nginx-v-dvuh-slovah.html
    environment:
      - DATABASE_URL=postgresql://admin:PassworD@db:5432/db_v

      # путь до бд, PassworDw@db, где PassworD - пароль, а  db - наименование сервиса базы данных
    volumes:
      - ./app:/app
    #Проброска данных c host во внутрь контейнера, на продакшн так делать не надо,
    #лучше через COPY . /app в Dockerfile
    expose:
      - 5000 # не светим портом в хост

    #Команда EXPOSE настраивает порт для своего сервера. Это необходимо,
    #чтобы Docker мог нужным образом настроить Сеть в контейнере.

    depends_on:
      - db
    #Загружать после полной загрузки db
    #----------------------------------------------------------------------------------
  #------------------------------------------------------------------------------------
  #pgadmin управление Базой данных
  pgadmin:
    image: dpage/pgadmin4
    container_name: pg_admin4
    depends_on:
      - db
    #Загрузка после полной загрузки db
    environment:
      - PGADMIN_DEFAULT_EMAIL=andrey.tonkovich@gmail.com
      - PGADMIN_DEFAULT_PASSWORD=PpassworD # если сменить здесь, то нужно удалить контентер
      - PGADMIN_LISTEN_ADDRESS=0.0.0.0 # чтобы не было косяков с nginx лушче в одну сеть с app
      - PGADMIN_LISTEN_PORT=5555
    #----------------------------------------------------------------------------------------

  #------------------------------------------------------------------------------------------
  nginx:
    #Nginx принимает все запросы из Интернета.
    #Он может обрабатывать их очень быстро и обычно настраивается так,
    #чтобы пропускать только те запросы, которые действительно должны поступить
    #в ваше веб-приложение. Остальные он блокирует

    #Источник: https://calcsbox.com/post/cto-takoe-gunicorn-i-nginx-v-dvuh-slovah.html
    build: ./nginx
    #Создание image по параметрам Dockerfile в папке nginx
    ports:
      - 80:80
    #Проброска внутреннего порта контейнера во вне
    volumes:
      - ./app/static:/home/web/default/static
    # для отображения статистики минуя python, на прямую через NGINX
    depends_on:
      - app
      - pgadmin
    #Загружать после полной загрузки app, pgadmin
  #-------------------------------------------------------------------------------------
  #База данных Postgres
  db:
    container_name: db
    #ports:
    #  - "5432:5432" # стандартный вариант проброски порта во вне
    environment:
      POSTGRES_DB: "db_v"
      POSTGRES_USER: "admin"
      POSTGRES_PASSWORD: "PassworD"
      PGDATA: "/var/lib/postgresql/data/pgdata"

    image: postgres:14.3-alpine
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=1GB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    volumes:
      - ../2. Init Database:/docker-entrypoint-initdb.d
      - pg_db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d db_v"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 4G

volumes:
  pg_db:

    #----------------------------------------------------------------------------------
